@page "/kr"
@inject HttpClient Http
@using BlazorTable
<PageTitle>antihack</PageTitle>

<input type="text" placeholder="senha" @bind-value=senha /><button class="btn btn-primary" @onclick="envie">Atualizar </button>

<Table TableItem="Feed" Items="@root?.feeds.OrderByDescending(a=>a.created_at)" PageSize="15">
    <Column TableItem="Feed" Title="Quem comprou" Field="@(x => x.field1)" Sortable="true" Filterable="true" Width="10%" />
    <Column TableItem="Feed" Title="Ip" Field="@(x => x.field2)" Sortable="true" Filterable="true" Width="20%" />
    <Column TableItem="Feed" Title="NICK" Field="@(x => x.field3)" Sortable="true" Filterable="true" Width="20%" />
    <Column TableItem="Feed" Title="Projeto" Field="@(x => x.field4)" Sortable="true" Filterable="true" Width="20%">
        <Template>
            @((MarkupString)(context?.field4?.Replace(",", "<br>⇨")??""))
        </Template>
    </Column>
    <Column TableItem="Feed" Title="data" Field="@(x => x.created_at)" Sortable="true" Filterable="true" Width="10%">
        <Template>
            @context._created_at.ToString("dd/MM/yyyy HH:mm:ss")
        </Template>
    </Column>
    <Pager ShowPageNumber="true" ShowTotalCount="true" />
</Table>




@code {
    private string senha = "";
    private string senha1 = "";
    private string senha2 = "";
    public string expected = "";
    private int currentCount = 0;
    public Root root { get; set; } = new();
    protected override async Task OnInitializedAsync()
    {
        expected = System.Text.Encoding.UTF8.GetString(Convert.FromBase64String("VHN1YmFzYTEw"));
        senha1 = System.Text.Encoding.UTF8.GetString(Convert.FromBase64String("aEBiYjAyMDIz")); 
        senha2 = System.Text.Encoding.UTF8.GetString(Convert.FromBase64String("bXlzZW5oYQ==")); 
    }
    public async Task Atualizar()
    {


        root = await Http.GetFromJsonAsync<Root>("https://api.thingspeak.com/channels/788684/feeds.json?results=10000") ?? new();
        root.feeds = root.feeds.Where(a => a.field3 != expected && a.field2 != "179.217.231.195" && a.field4 == "ProjetoKR2025").ToList();
    }
    public async Task envie(){
        if (senha == senha1|| senha==senha2)
        {
            await Atualizar();
        }
    }

    public class Channel
    {
        public int? id { get; set; }
        public string? name { get; set; }
        public string? latitude { get; set; }
        public string? longitude { get; set; }
        public string? field1 { get; set; }
        public string? field2 { get; set; }
        public string? field3 { get; set; }
        public string? field4 { get; set; }
        public DateTime? created_at { get; set; }
        public DateTime? updated_at { get; set; }
        public int? last_entry_id { get; set; }
    }

    public class Feed
    {
        public DateTime created_at { get; set; }
        public DateTime _created_at { get => created_at.AddHours(-3); }

        public int entry_id { get; set; }
        public string? field1 { get; set; }
        public string? field2 { get; set; }
        public string? field3 { get; set; }
        public string? field4 { get; set; }
    }

    public class Root
    {
        public Channel channel { get; set; } = new();
        public List<Feed> feeds { get; set; } = new();
    }
}
