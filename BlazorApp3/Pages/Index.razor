@page "/"
@using Microsoft.JSInterop
@using System.Text.Json.Serialization;

<PageTitle>Index</PageTitle>
@if (loading == false)
{
    <div>
        <h3>Gerador de sumula&nbsp;&nbsp;&nbsp;<MudButton Variant=Variant.Outlined Color="Color.Info" @onclick="@(()=>{sumula = new(1);RemoveCookie();})"> Resetar </MudButton> </h3>
        <div class="row" style="width:100%;font-size:10pt">
            <div class="col-md-5">
                <label for="nomeTimeA">Time A:</label>
                <input @onblur=gravarsumula id="nomeTimeA" @bind="sumula.nomeTimeA" class="form-control" />
            </div>
            <div class="col-md-2" style="text-align:center;">
                <BR>
                <b>@sumula.placarTimeA VS @sumula.placarTimeB</b>
            </div>
            <div class="col-md-5">
                <label for="nomeTimeB">Time B: </label>
                <input @onblur=gravarsumula id="nomeTimeB" @bind="sumula.nomeTimeB" class="form-control" />
            </div>

            <div class="col-md-6">
                <table Class="table-sm" style="width:100%">
                    <thead>
                        <tr>
                            <th style="width:80px">Posição</th>
                            <th>Nome</th>
                            <th style="width:80px">Gols</th>
                            <th style="width:80px">Assis</th>
                            <th style="width:80px">G.Contra</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var jogador in sumula.jogadoresTimeA ?? new())
                        {
                            <tr>
                                <td>
                                    <select id="selectA" @bind="jogador.posicao" class="form-control">
                                        <option value="GK">GK</option>
                                        <option value="ZAG">ZAG</option>
                                        <option value="MID">MID</option>
                                        <option value="ATK">ATK</option>
                                    </select>
                                </td>
                                <td><input @onblur=gravarsumula @bind-value="jogador.nome" class="form-control" /></td>
                                <td><input @onblur=gravarsumula @bind="jogador.gols" class="form-control" type="number" /></td>
                                <td><input @onblur=gravarsumula @bind-value="jogador.assistencias" class="form-control" type="number" /></td>
                                <td><input @onblur=gravarsumula @bind-value="jogador.golsContra" class="form-control" type="number" /></td>
                            </tr>
                        }
                        <tr>
                            <td colspan="5">
                                <MudButton Variant=Variant.Text Color="Color.Info" @onclick="@(()=>sumula.jogadoresTimeA.Add(new("MID")))">Add jogador</MudButton>
                                <MudButton title="remove ultimo jogador" Disabled=@(sumula?.jogadoresTimeA?.Count()<=3) Variant=Variant.Text Color="Color.Error" @onclick="@(()=>sumula?.jogadoresTimeA?.Remove(sumula.jogadoresTimeA.Last()))">remover jogador</MudButton>

                            </td>
                        </tr>
                    </tbody>

                </table>

            </div>

            <div class="col-md-6">
                <table Class="table-sm" style="width:100%">
                    <thead>
                        <tr>
                            <th style="width:80px">Posição</th>
                            <th>Nome</th>
                            <th style="width:80px">Gols</th>
                            <th style="width:80px">Assis</th>
                            <th style="width:80px">G. Contra</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var jogador in sumula.jogadoresTimeB ?? new())
                        {
                            <tr>
                                <td>
                                    <select id="selectB" @bind="jogador.posicao" class="form-control">
                                        <option value="GK">GK</option>
                                        <option value="ZAG">ZAG</option>
                                        <option value="MID">MID</option>
                                        <option value="ATK">ATK</option>
                                    </select>
                                </td>
                                <td><input @onblur=gravarsumula @bind-value="jogador.nome" class="form-control" /></td>
                                <td><input @onblur=gravarsumula @bind="jogador.gols" class="form-control" type="number" /></td>
                                <td><input @onblur=gravarsumula @bind-value="jogador.assistencias" class="form-control" type="number" /></td>
                                <td><input @onblur=gravarsumula @bind-value="jogador.golsContra" class="form-control" type="number" /> </td>
                            </tr>
                        }
                        <tr>
                            <td colspan="5">
                                <MudButton Variant=Variant.Text Color="Color.Info" @onclick="@(()=>sumula.jogadoresTimeB.Add(new("MID")))">Add jogador</MudButton>
                                <MudButton title="remove ultimo jogador" Disabled=@(sumula?.jogadoresTimeB?.Count()<=3) Variant=Variant.Text Color="Color.Error" @onclick="@(()=>sumula?.jogadoresTimeB?.Remove(sumula.jogadoresTimeB.Last()))">Remover jogador</MudButton>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>


        <div class="row">
            <div class="col-lg-6">
                <div>Copie e cole o texto abaixo no fórum</div>
                <div style="border: 1px solid black;padding:10px; background-color:white; height:100%">

                    <div style="color:black"><b>@sumula.nomeTimeA @sumula.placarTimeA VS @sumula.placarTimeB @sumula.nomeTimeB</b></div>
                    <div style="color:darkblue"><b>Casa: @sumula.nomeTimeA </b></div>

                    <table class="table-sm">
                        <thead>
                            <tr style="color:darkblue">
                                <td><b>| Posição |</b></td>
                                <td><b>| Nome | </b></td>
                                <td><b>| Gols |</b></td>
                                <td><b>| Assistência |</b></td>
                                <td><b>| G. Contra |</b></td>
                            </tr>
                        </thead>
                        <tbody>

                            @foreach (var i in sumula?.jogadoresTimeA ?? new List<Jogadores>())
                            {
                                <tr>
                                    <td>&nbsp;@i.posicao &nbsp</td>
                                    <td>&nbsp;@i.nome &nbsp;</td>
                                    <td>&nbsp;@i.gols &nbsp;</td>
                                    <td>&nbsp;@i.assistencias &nbsp;</td>
                                    <td>&nbsp;@i.golsContra &nbsp;</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                    <div style="color:darkgreen"><b>Visitante: @sumula?.nomeTimeB </b></div>

                    <table class="table-sm">
                        <thead>
                            <tr style="color:darkgreen">
                                <td><b>| Posição |</b></td>
                                <td><b>| Nome | </b></td>
                                <td><b>| Gols |</b></td>
                                <td><b>| Assistência |</b></td>
                                <td><b>| G. Contra |</b></td>
                            </tr>
                        </thead>
                        <tbody>

                            @foreach (var i in sumula?.jogadoresTimeB ?? new List<Jogadores>())
                            {
                                <tr>
                                    <td>&nbsp;@i.posicao &nbsp</td>
                                    <td>&nbsp;@i.nome &nbsp;</td>
                                    <td>&nbsp;@i.gols &nbsp;</td>
                                    <td>&nbsp;@i.assistencias &nbsp;</td>
                                    <td>&nbsp;@i.golsContra &nbsp;</td>
                                </tr>
                            }
                        </tbody>
                    </table>

                    <div style="color:black"><b>Anotações do Juiz:</b></div>
                    <div> @((MarkupString)sumula?.Anotacoes?.Replace("\n", "<br>"))</div>

                </div>
            </div>
            <div class="col-lg-6">
                <div>Faça download do arquivo json do jogo e anexe no fórum</div>
                <div style="border: 1px solid darkblue;padding:10px; background-color:white; height:100%">
                    <div class="col-lg-12">
                        <br>
                        <h6><b>Atenção! Colocar os nomes corretamente, baixe o arquivo clicando no botão abaixo e anexe no fórum, isso é responsavel pela totalização dos gols e assistencias  </b></h6>
                        <MudButton Variant=Variant.Filled Color="Color.Info" @onclick="SalvarTextoComoArquivo">Download do arquivo do jogo</MudButton>
                    </div>

                </div>
            </div>

        </div>
    </div>
    <br />
    <br />
}

@code {
    public string eventoSelecionado { get; set; } = "Gol";
    public string nomeJogador { get; set; } = "";
    public objSumula sumula { get; set; } = new();
    public List<Log> logs { get; set; } = new();
    public bool loading { get; set; }
    public class Jogadores
    {
        public Jogadores()
        {
        }
        public Jogadores(String NOME)
        {
            posicao = NOME;
        }
        public string posicao { get; set; }
        public string nome { get; set; }
        public int gols { get; set; }
        public int assistencias { get; set; }
        public int golsContra { get; set; }
    }
    protected override async Task OnInitializedAsync()
    {
        try
        {
            loading = true;
            obterSumula();
            loading = false;
        }
        catch
        {

        }
    }
    public async void AdicionarEvento()
    {
        base.StateHasChanged();
        var i = sumula.todosJogadores.FirstOrDefault(a => a.nome == nomeJogador);
        if (i == null)
        {
            return;
        }
        logs.Add(new Log(eventoSelecionado, nomeJogador));

        if (eventoSelecionado == "Gol")
        {
            i.gols++;

        }
        else if (eventoSelecionado == "Assistencia")
        {
            i.assistencias++;

        }
        else if (eventoSelecionado == "Contra")
        {
            i.golsContra++;
        }
        var j = System.Text.Json.JsonSerializer.Serialize(sumula);

        await SetCookie("sumula", j, 5);

    }

    private async Task gravarsumula()
    {
        var j = System.Text.Json.JsonSerializer.Serialize(sumula);
        await SetCookie("sumula", j, 5);
    }
    private async void obterSumula()
    {
        var x = await GetCookie("sumula");
        if (string.IsNullOrEmpty(x))
        {
            this.sumula = new(1);
            StateHasChanged();

        }
        else
        {
            var s = System.Text.Json.JsonSerializer.Deserialize<objSumula>(x);
            this.sumula = s;

            StateHasChanged();
        }
    }
    public class Log
    {
        public Log(string evento, string nome)
        {
            this.evento = evento;
            this.nome = nome;
            data = DateTime.Now;
        }
        public DateTime data { get; set; }
        public string evento { get; set; }
        public string nome { get; set; }
    }

    public async Task<string> GetCookie(string key)
    {
        return await _js.InvokeAsync<string>("cookieFunctions.getCookie", key);
    }

    public async Task SetCookie(string key, string value, int expireDays)
    {
        await _js.InvokeVoidAsync("cookieFunctions.setCookie", key, value, expireDays);
    }

    public async Task RemoveCookie()
    {
        await _js.InvokeVoidAsync("cookieFunctions.removeCookie", "sumula");
    }

    // Método para salvar a string em um arquivo de texto
    async Task SalvarTextoComoArquivo()
    {
        sumula.dataJogo = DateTime.Now;
        var texto = System.Text.Json.JsonSerializer.Serialize(sumula, new System.Text.Json.JsonSerializerOptions() { WriteIndented = true });
        // Cria o conteúdo do arquivo
        byte[] bytes = System.Text.Encoding.UTF8.GetBytes(texto);
        var content = new System.IO.MemoryStream(bytes);

        // Obtém o nome do arquivo
        string filename = $@"SUMULA {sumula.nomeTimeA} {sumula.placarTimeA} VS {sumula.placarTimeB} {sumula.nomeTimeB} - {DateTime.Now.ToString("ddMMyyyyHHmmss")}.json";

        // Cria e disponibiliza o arquivo para download
        await _js.InvokeVoidAsync("BlazorDownloadFile.saveAsFile", filename, Convert.ToBase64String(bytes));
    }


}